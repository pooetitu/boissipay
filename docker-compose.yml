version: '3.8'

services:
  kafka:
    image: landoop/fast-data-dev:latest
    environment:
      ADV_HOST: kafka
      RUNTESTS: 0             # Disable Running tests so the cluster starts faster
      FORWARDLOGS: 0          # Disable running 5 file source connectors that bring application logs into Kafka topics
      SAMPLEDATA: 0           # Do not create sea_vessel_position_reports, nyc_yellow_taxi_trip_data, reddit_posts topics with sample Avro records.
    restart: unless-stopped
    networks:
      - boissipay-network
    ports:
      # - 2181:2181               # Zookeeper
      - '3030:3030'               # Landoop UI
      # - 8081-8083:8081-8083     # REST Proxy, Schema Registry, Kafka Connect ports
      # - 9581-9585:9581-9585     # JMX Ports
      # - '9092:9092'
    volumes:
      - 'kafka_data:/data'
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 10s
      retries: 10

  contract_db:
    image: bitnami/postgresql:14
    environment:
      POSTGRESQL_USERNAME: ${CONTRACT_DB_USERNAME}
      POSTGRESQL_PASSWORD: ${CONTRACT_DB_PASSWORD}
      POSTGRESQL_DATABASE: ${CONTRACT_DB_NAME}
    #    ports:
    #      - "5432:5432"
    volumes:
      - contract_db_data:/bitnami/postgresql
    restart: unless-stopped
    networks:
      - boissipay-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "contract", "-d", "contract" ]
      interval: 20s
      timeout: 10s
      retries: 5

  contract:
    depends_on:
      contract_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile.contract
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      KAFKA_AUTO_OFFSET_RESET: earliest
      KAFKA_TOPIC_CREATE_CONTRACT: ${KAFKA_TOPIC_CREATE_CONTRACT}
      DATASOURCE_CONNECTION_TIMEOUT: 20000
      DATASOURCE_MAXIMUM_POOL_SIZE: 5
      H2_CONSOLE_ENABLED: true
      JPA_OPEN_IN_VIEW: false
      JPA_GENERATE_DDL: true
      DATABASE_HOST: contract_db
      DATABASE_PORT: 5432
      DATABASE_NAME: ${CONTRACT_DB_NAME}
      DATABASE_USER: ${CONTRACT_DB_USERNAME}
      DATABASE_PASSWORD: ${CONTRACT_DB_PASSWORD}
      JPA_HIBERNATE_DDL_AUTO: update
    restart: unless-stopped
    networks:
      - boissipay-network
    ports:
      - '8080:8080'

  billing_db:
    image: bitnami/postgresql:14
    environment:
      POSTGRESQL_USERNAME: ${BILLING_DB_USERNAME}
      POSTGRESQL_PASSWORD: ${BILLING_DB_PASSWORD}
      POSTGRESQL_DATABASE: ${BILLING_DB_NAME}
    volumes:
      - billing_db_data:/bitnami/postgresql
    restart: unless-stopped
    networks:
      - boissipay-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "billing", "-d", "billing" ]
      interval: 20s
      timeout: 10s
      retries: 5

  billing:
    depends_on:
      billing_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile.billing
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      KAFKA_GROUP_ID: boissipay
      KAFKA_AUTO_OFFSET_RESET: earliest
      KAFKA_TOPIC_CREATE_CONTRACT: ${KAFKA_TOPIC_CREATE_CONTRACT}
      KAFKA_TOPIC_PROCESS_PAYMENT: ${KAFKA_TOPIC_PROCESS_PAYMENT}
      KAFKA_TOPIC_PAYMENT_SUCCESS: ${KAFKA_TOPIC_PAYMENT_SUCCESS}
      KAFKA_TOPIC_SEND_INVOICE: ${KAFKA_TOPIC_SEND_INVOICE}
      KAFKA_TOPIC_INVOICE_SENT: ${KAFKA_TOPIC_INVOICE_SENT}
      DATASOURCE_CONNECTION_TIMEOUT: 20000
      DATASOURCE_MAXIMUM_POOL_SIZE: 5
      H2_CONSOLE_ENABLED: true
      JPA_OPEN_IN_VIEW: false
      JPA_GENERATE_DDL: true
      DATABASE_HOST: billing_db
      DATABASE_PORT: 5432
      DATABASE_NAME: ${BILLING_DB_NAME}
      DATABASE_USER: ${BILLING_DB_USERNAME}
      DATABASE_PASSWORD: ${BILLING_DB_PASSWORD}
      JPA_HIBERNATE_DDL_AUTO: update
      INVOICE_SCHEDULING_CRON: ${INVOICE_SCHEDULING_CRON}

    restart: unless-stopped
    networks:
      - boissipay-network
    ports:
      - '8181:8080'

  payment:
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile.payment
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      KAFKA_AUTO_OFFSET_RESET: earliest
      KAFKA_TOPIC_PROCESS_PAYMENT: ${KAFKA_TOPIC_PROCESS_PAYMENT}
      KAFKA_TOPIC_PAYMENT_SUCCESS: ${KAFKA_TOPIC_PAYMENT_SUCCESS}
    networks:
      - boissipay-network
    ports:
      - '8282:8080'

  invoice:
    depends_on:
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: Dockerfile.invoice
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID}
      KAFKA_AUTO_OFFSET_RESET: earliest
      KAFKA_TOPIC_SEND_INVOICE: ${KAFKA_TOPIC_SEND_INVOICE}
      KAFKA_TOPIC_INVOICE_SENT: ${KAFKA_TOPIC_INVOICE_SENT}
    networks:
      - boissipay-network
    ports:
      - '8383:8080'


volumes:
  kafka_data:
  contract_db_data:
  billing_db_data:

networks:
  boissipay-network:
    driver: bridge